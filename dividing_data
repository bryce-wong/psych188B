# OKAY STILL A WORK IN PROGRESS, WILL WORK ON IT MORE WHEN I GET HOME

import numpy as np

#create category matrices
faces = []
cats = []
bottles = []
shoes = []
scissors = []
houses = []
chairs = []
controls = []
rests = []

#check the second index of each row and create subsets based on the chunk numbers there
chunk_0 = sub1[sub1[:,1] == 0]
chunk_1 = sub1[sub1[:,1] == 1]
chunk_2 = sub1[sub1[:,1] == 2]
chunk_3 = sub1[sub1[:,1] == 3]
chunk_4 = sub1[sub1[:,1] == 4]
chunk_5 = sub1[sub1[:,1] == 5]
chunk_6 = sub1[sub1[:,1] == 6]
chunk_7 = sub1[sub1[:,1] == 7]
chunk_8 = sub1[sub1[:,1] == 8]
chunk_9 = sub1[sub1[:,1] == 9]
chunk_10 = sub1[sub1[:,1] == 10]

#divide_data checks the first index of each new array and adds the array to the appropriate category matrix
def divide_data(array):
	if row[0] == 'face':
		faces.append(array)
	elif row[0] == 'cat':
		cats.append(array)
	elif row[0] == 'bottle':
		bottles.append(array)
	elif row[0] == 'shoe':
		shoes.append(array)
	elif row[0] == 'scissor':
		scissors.append(array)
	elif row[0] == 'house':
		houses.append(array)
	elif row[0] == 'chair':
		chairs.append(array)
	elif row[0] == 'scramblepix':
		controls.append(array)
	elif row[0] == 'rest':
		rests.append(array)
	return

#create a list just to iterate through
chunks = [chunk_0,chunk_1,chunk_2,chunk_3,chunk_4,chunk_5,chunk_6,chunk_7,chunk_8,chunk_9,chunk_10]

#for each chunk, check the 1st index of each row and create subsets based on the label
for chunk in chunks:
    faces_,i = chunk[chunk[:,0]=='face']

#read through each row in each chunk and add to appropro matrix
for chunk in chunks:
    np.apply_along_axis(divide_data, axis=1, arr=chunk)

#create a list to iterate through
lists = [faces,cats,bottles,shoes,scissors,houses,chairs,controls,rests]

for list in lists:
    #transform each matrix into a numpy array
    list = np.array(list)
    #average each numpy matrix into a single row
    list = np.mean(list, axis=0)

#now we have 8 numpy arrays, each representing one trial for the subject. put together into one matrix
np.concatenate((faces,cats,bottles,shoes,scissors,houses,chairs,controls), axis=0)
